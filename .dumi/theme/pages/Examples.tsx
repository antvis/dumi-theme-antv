import { useContext, useState } from 'react';
import { Header } from '../slots/Header';
import { Footer } from '../slots/Footer';
import { ThemeAntVContext } from '../context';
import { ExampleList } from '@/.dumi/theme/slots/ExampleList';
import styles from './examples.module.less';
import { useMedia } from 'react-use';
import { Affix, Anchor, Layout as AntLayout, Menu } from 'antd';
import { debounce, groupBy } from 'lodash-es';
import Drawer from 'rc-drawer';
import i18n from 'i18next';
import AnchorLink from 'antd/es/anchor/AnchorLink';
import { createFromIconfontCN, MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';
import SubMenu from 'antd/lib/menu/SubMenu';

const getMenuItemLocaleKey = (slug = '') => {
  const slugPieces = slug.split('/');
  return slugPieces
    .slice(slugPieces.indexOf('examples') + 1)
    .filter((key) => key)
    .join('/');
};

const MenuIcon = createFromIconfontCN({
  scriptUrl: '//at.alicdn.com/t/font_470089_1lnym745udm.js', // generated by iconfont.cn
});

const renderAnchorItems = (edges: any[]) =>
  edges
    .filter((edge: any) => {
      const {
        node: {
          fields: { slug },
        },
      } = edge;
      return !(slug.endsWith('/API') ||
        slug.endsWith('/design') ||
        slug.endsWith('/gallery'));
    })
    .sort((a: any, b: any) => {
      const {
        node: {
          frontmatter: { order: aOrder },
        },
      } = a;
      const {
        node: {
          frontmatter: { order: bOrder },
        },
      } = b;
      return aOrder - bOrder;
    })
    .map((edge: any) => {
      const {
        node: {
          frontmatter: { title, icon },
          fields: { slug },
        },
      } = edge;
      return (
        <Menu.Item key={slug}>
          <AnchorLink
            href={`#category-${title.replace(/\s/g, '')}`}
            title={
              <div>
                {icon && (
                  <MenuIcon className={styles.menuIcon} type={`icon-${icon}`} />
                )}
                <span>{title}</span>
              </div>
            }
          />
        </Menu.Item>
      );
    });

const getExampleOrder = ({
                           groupedEdgeKey = '',
                           examples = [],
                           groupedEdges = {},
                         }: {
  groupedEdgeKey: string;
  examples: any[];
  groupedEdges: {
    [key: string]: any[];
  };
}): number => {
  const key = getMenuItemLocaleKey(groupedEdgeKey);
  if (examples.find((item) => item.slug === key)) {
    return (examples.findIndex((item) => item.slug === key) || 0) + 100;
  }
  if (!groupedEdges[groupedEdgeKey] && !groupedEdges[groupedEdgeKey].length) {
    return 0;
  }
  return groupedEdges[groupedEdgeKey][0].node.frontmatter.order || 0;
};

/**
 * Examples 页面
 *
 * @author YuZhanglong <loveyzl1123@gmail.com>
 */
const Example = () => {
  /** 示例页面的元数据信息 */
  const metaData: any = useContext(ThemeAntVContext);

  const [drawOpen, setDrawOpen] = useState(false);

  const { allMarkdownRemark, site } = metaData.meta;
  const {
    siteMetadata: { examples = [], galleryMenuCloseAll = false },
  } = metaData.meta.site;

  const { edges = [] } = allMarkdownRemark;

  const currentPath = location.pathname.replace(/\/$/, '');

  const isGalleryView = currentPath.includes('/examples/gallery');

  console.log(isGalleryView);

  const { node: markdownRemark } =
  edges.find((edge: any) => {
    const {
      fields: { slug },
    } = edge.node;

    if (
      /\/examples\/.*\/API$/.test(currentPath) ||
      /\/examples\/.*\/design$/.test(currentPath)
    ) {
      return currentPath.indexOf(slug) >= 0;
    }
    return (
      currentPath === slug ||
      currentPath.endsWith(slug)
    );
  }) || {};

  const [openKeys, setOpenKeys] = useState<string[]>([]);

  const isWide = useMedia('(min-width: 767.99px)', true);


  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);

  const onAnchorLinkChange = debounce((currentActiveLink: string) => {
    let currentSlug = '';
    edges.forEach((edge: any) => {
      const {
        node: {
          frontmatter: { title },
          fields: { slug },
        },
      } = edge;
      if (`#category-${title.replace(/\s/g, '')}` === currentActiveLink) {
        currentSlug = slug;
      }
    });
    setSelectedKeys([currentSlug]);
    if (currentActiveLink) {
      const link = document.querySelector(`a[href='${currentActiveLink}']`);
      if (link) {
        const anchor = link?.parentNode as Element;
        anchor.scrollIntoView({
          block: 'center',
        });
      }
    }
  }, 300);

  const groupedEdges = groupBy(
    edges,
    ({
       node: {
         fields: { slug: slugString },
       },
     }: any) => {
      // API.md and deisgn.md
      if (slugString.endsWith('/API') || slugString.endsWith('/design')) {
        return slugString.split('/').slice(0, -2).join('/');
      }
      // index.md
      return slugString.split('/').slice(0, -1).join('/');
    },
  );

  // 提取出筛选 和 排序的方法 好在获取treeData 的时候使用
  const groupedEdgesDataEdit = Object.keys(groupedEdges)
    .filter((key) => key.startsWith(`/${i18n.language}/`))
    .sort((a: string, b: string) => {
      const aOrder = getExampleOrder({
        groupedEdgeKey: a,
        examples,
        groupedEdges,
      });
      const bOrder = getExampleOrder({
        groupedEdgeKey: b,
        examples,
        groupedEdges,
      });
      return aOrder - bOrder;
    });

  const menu = (
    <Anchor className={styles.galleryAnchor} onChange={onAnchorLinkChange}>
      <Menu
        mode='inline'
        selectedKeys={selectedKeys}
        style={{ height: '100%' }}
        openKeys={openKeys}
        onOpenChange={(currentOpenKeys) =>
          setOpenKeys(currentOpenKeys as string[])
        }
        forceSubMenuRender
      >
        {groupedEdgesDataEdit.map((slugString) => {
          const slugPieces = slugString.split('/');
          if (slugPieces.length <= 3) {
            return renderAnchorItems(groupedEdges[slugString]);
          }
          const menuItemLocaleKey = getMenuItemLocaleKey(slugString);
          const doc =
            examples.find((item: any) => item.slug === menuItemLocaleKey) || {};
          return (
            <SubMenu
              key={slugString}
              title={
                <div>
                  {doc.icon && (
                    <MenuIcon
                      className={styles.menuIcon}
                      type={`icon-${doc.icon}`}
                    />
                  )}
                  <span>
                    {doc && doc.title
                      ? doc.title[i18n.language]
                      : menuItemLocaleKey}
                  </span>
                </div>
              }
            >
              {renderAnchorItems(groupedEdges[slugString])}
            </SubMenu>
          );
        })}
      </Menu>
    </Anchor>
  );

  const leftMenu = () => {
    return (
      <Affix
        offsetTop={0}
        className={styles.affix}
        style={{ height: isWide ? '100vh' : 'inherit' }}
      >
        {isWide ? (
          <AntLayout.Sider width='auto' theme='light' className={styles.sider}>
            {menu}
          </AntLayout.Sider>
        ) : (
          <Drawer
            handler={
              drawOpen ? (
                <MenuFoldOutlined className={styles.menuSwitch} />
              ) : (
                <MenuUnfoldOutlined className={styles.menuSwitch} />
              )
            }
            wrapperClassName={styles.menuDrawer}
            onChange={(open: any) => setDrawOpen(!!open)}
            width={280}
          >
            {menu}
          </Drawer>
        )}
      </Affix>
    );
  };


  return (
    <>
      <Header isHomePage={false} />
      <AntLayout>
        {leftMenu()}
      </AntLayout>
      <Footer />
    </>
  );
};

export default Example;
